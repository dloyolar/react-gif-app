{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","loading","toUpperCase","GifGrid","state","setState","useEffect","then","useFetchGifs","image","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIHI,MAAMF,GAJH,cAIfG,EAJe,gBAKEA,EAAIC,OALN,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,EAAOO,QAAQ,SACnC,4BAAIP,EAAMQ,cAAgBR,EAAQ,0CCF3BS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNY,SAAS,IAH6B,mBACjCG,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACf,GACtBa,EAAS,CACPhB,KAAMG,EACNS,SAAS,SAGZ,CAACnB,IAEGsB,EDb2BI,CAAa1B,GAAjCa,EADyB,EAC/BN,KAAcY,EADiB,EACjBA,QAEtB,OACE,qCACE,mCAAMnB,EAAN,OACCmB,GACC,mBAAGH,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACkB,GAAD,OACV,cAAC,EAAD,eAAgCA,GAAdA,EAAMhB,aEXrBiB,EAAS,WAAO,IAAD,EACU1C,mBAAS,CAAC,qBADpB,mBACnB2C,EADmB,KACP5C,EADO,KAG1B,OACE,qCACE,wCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWpB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVxB8B,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.d0c1d139.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cat) => [inputValue, ...cat]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type='text' value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=15&api_key=YzfEcHSohd23s7SuJ3HGLmsMEzUGtXY0`;\r\n  const res = await fetch(url);\r\n  const { data } = await res.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className='card animate__animated animate__fadeInDown'>\r\n      <img src={url} alt={title} loading='lazy' />\r\n      <p>{title.toUpperCase() ? title : 'Imagen without title ðŸ˜¢'}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3> {category} </h3>\r\n      {loading && (\r\n        <p className='animate__animated animate__flash'>Loading...</p>\r\n      )}\r\n      <div className='card-grid'>\r\n        {images.map((image) => (\r\n          <GifGridItem key={image.id} {...image} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((img) => {\r\n      setState({\r\n        data: img,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifApp = () => {\r\n  const [categories, setCategories] = useState(['Kimetsu no Yaiba']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifApp } from './GifApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifApp />,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}